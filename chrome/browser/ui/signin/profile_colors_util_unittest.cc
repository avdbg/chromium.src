// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/browser/ui/signin/profile_colors_util.h"

#include "base/strings/stringprintf.h"
#include "base/strings/utf_string_conversions.h"
#include "base/test/task_environment.h"
#include "chrome/browser/profiles/profile_attributes_entry.h"
#include "chrome/browser/profiles/profile_attributes_storage.h"
#include "chrome/browser/profiles/profile_info_cache.h"
#include "chrome/browser/profiles/profile_manager.h"
#include "chrome/browser/themes/browser_theme_pack.h"
#include "chrome/browser/themes/custom_theme_supplier.h"
#include "chrome/common/search/generated_colors_info.h"
#include "chrome/test/base/testing_browser_process.h"
#include "chrome/test/base/testing_profile_manager.h"
#include "components/account_id/account_id.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace {

constexpr size_t kColorsCount = base::size(chrome_colors::kGeneratedColorsInfo);

size_t ReturnNth(size_t n, size_t size) {
  DCHECK_LT(n, size);
  return n;
}

const chrome_colors::ColorInfo& GetColor(size_t index) {
  return chrome_colors::kGeneratedColorsInfo[index];
}

class ProfileColorsUtilTest : public testing::Test {
 public:
  ProfileColorsUtilTest()
      : testing_profile_manager_(TestingBrowserProcess::GetGlobal()) {}
  ~ProfileColorsUtilTest() override = default;

 protected:
  void SetUp() override { ASSERT_TRUE(testing_profile_manager_.SetUp()); }

  void AddProfile(base::Optional<SkColor> color) {
    size_t number_of_profiles = storage()->GetNumberOfProfiles();

    base::FilePath profile_path =
        testing_profile_manager_.profile_manager()->user_data_dir().AppendASCII(
            base::StringPrintf("testing_profile_path%" PRIuS,
                               number_of_profiles));
    base::string16 name = base::ASCIIToUTF16(
        base::StringPrintf("testing_profile_name%" PRIuS, number_of_profiles));
    storage()->AddProfile(profile_path, name, std::string(), name, true,
                          number_of_profiles, std::string(), EmptyAccountId());

    EXPECT_EQ(number_of_profiles + 1, storage()->GetNumberOfProfiles());

    if (!color.has_value())
      return;

    ProfileAttributesEntry* entry = nullptr;
    EXPECT_TRUE(storage()->GetProfileAttributesWithPath(profile_path, &entry));

    auto pack = base::MakeRefCounted<BrowserThemePack>(
        CustomThemeSupplier::ThemeType::AUTOGENERATED);
    BrowserThemePack::BuildFromColor(*color, pack.get());
    ProfileThemeColors colors =
        GetProfileThemeColorsForThemeSupplier(pack.get());
    entry->SetProfileThemeColors(colors);
  }

  void ExpectAllColorsAvailable() {
    for (size_t i = 0; i < kColorsCount; ++i)
      EXPECT_EQ(GetAvailableColor(i).id, GetColor(i).id);
  }

  ProfileAttributesStorage* storage() {
    return testing_profile_manager_.profile_attributes_storage();
  }

  chrome_colors::ColorInfo GetAvailableColor(size_t n) {
    // Instead of providing a random number generator, return the nth option
    // deterministically.
    return GenerateNewProfileColorWithGenerator(*storage(),
                                                base::Bind(&ReturnNth, n));
  }

 private:
  TestingProfileManager testing_profile_manager_;
  base::test::TaskEnvironment task_environment_;
};

// Test that all colors are available with no other profiles.
TEST_F(ProfileColorsUtilTest, GenerateNewProfileColorWithNoColoredProfile) {
  ExpectAllColorsAvailable();

  // Add some profiles with the default theme.
  AddProfile(base::nullopt);
  AddProfile(base::nullopt);
  // Add a profile with a custom color.
  AddProfile(SK_ColorRED);

  // It still behaves the same, all colors are available.
  ExpectAllColorsAvailable();
}

// Test that the taken colors are not available.
TEST_F(ProfileColorsUtilTest,
       GenerateNewProfileColorWithMultipleColoredProfiles) {
  AddProfile(GetColor(5).color);
  AddProfile(GetColor(6).color);

  EXPECT_EQ(GetAvailableColor(0).id, GetColor(0).id);
  EXPECT_EQ(GetAvailableColor(4).id, GetColor(4).id);
  EXPECT_EQ(GetAvailableColor(5).id, GetColor(7).id);
  size_t max = kColorsCount - 1;
  EXPECT_EQ(GetAvailableColor(max - 2).id, GetColor(max).id);
}

// Test that if all colors are taken, then again all are available.
TEST_F(ProfileColorsUtilTest, GenerateNewProfileColorWithAllColorsTaken) {
  for (size_t i = 0; i < kColorsCount - 1; i++)
    AddProfile(GetColor(i).color);

  // Only the last color is available.
  EXPECT_EQ(GetAvailableColor(0).id, GetColor(kColorsCount - 1).id);

  // Take the last available color.
  AddProfile(GetColor(kColorsCount - 1).color);

  // Again, all colors are available.
  ExpectAllColorsAvailable();
}

}  // namespace
